var searchIndex = {};
searchIndex['ieee754'] = {"items":[[0,"","ieee754","Low-level manipulations of IEEE754 floating-point numbers.",null,null],[3,"Iter","","An iterator over floating point numbers, created by `Ieee754::upto`.",null,null],[8,"Bits","","",null,null],[10,"as_u64","","",0,{"inputs":[{"name":"bits"}],"output":{"name":"u64"}}],[8,"Ieee754","","Types that are IEEE754 floating point numbers.",null,null],[10,"upto","","Iterate over each value of `Self` in `[self, lim]`.",1,{"inputs":[{"name":"ieee754"},{"name":"self"}],"output":{"name":"iter"}}],[16,"Bits","","A type that represents the raw bits of `Self`.",1,null],[16,"Exponent","","A type large enough to store the true exponent of `Self`.",1,null],[16,"RawExponent","","A type large enough to store the raw exponent (i.e. with the bias).",1,null],[16,"Significand","","A type large enough to store the significand of `Self`.",1,null],[10,"next","","Return the next value after `self`.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"self"}}],[10,"ulp","","Return the unit-in-the-last-place ulp of `self`. That is,\n`x.abs().next() - x.abs()`, but handling overflow properly.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"option"}}],[10,"prev","","Return the previous value before `self`.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"self"}}],[10,"bits","","View `self` as a collection of bits.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"bits"}}],[10,"from_bits","","View a collections of bits as a floating point number.",1,{"inputs":[{"name":"ieee754"},{"name":"bits"}],"output":{"name":"self"}}],[10,"exponent_bias","","Get the bias of the stored exponent.",1,{"inputs":[{"name":"ieee754"}],"output":{"name":"exponent"}}],[10,"decompose_raw","","Break `self` into the three constituent parts of an IEEE754 float.",1,null],[10,"recompose_raw","","Create a `Self` out of the three constituent parts of an IEEE754 float.",1,{"inputs":[{"name":"ieee754"},{"name":"bool"},{"name":"rawexponent"},{"name":"significand"}],"output":{"name":"self"}}],[10,"decompose","","Break `self` into the three constituent parts of an IEEE754 float.",1,null],[10,"recompose","","Create a `Self` out of the three constituent parts of an IEEE754 float.",1,{"inputs":[{"name":"ieee754"},{"name":"bool"},{"name":"exponent"},{"name":"significand"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}]],"paths":[[8,"Bits"],[8,"Ieee754"],[3,"Iter"]]};
initSearch(searchIndex);
